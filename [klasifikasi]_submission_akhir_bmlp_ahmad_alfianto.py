# -*- coding: utf-8 -*-
"""[Klasifikasi] Submission Akhir BMLP_Ahmad_Alfianto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u6GAQeGo9VWG5JMN1PAT8DVvbIh4gvxV

# **Penting**
- Jangan mengubah atau menambahkan cell text yang sudah disediakan, Anda hanya perlu mengerjakan cell code yang sudah disediakan.
- Pastikan seluruh kriteria memiliki output yang sesuai, karena jika tidak ada output dianggap tidak selesai.
- Misal, Anda menggunakan df = df.dropna() silakan gunakan df.isnull().sum() sebagai tanda sudah berhasil. Silakan sesuaikan seluruh output dengan perintah yang sudah disediakan.
- Pastikan Anda melakukan Run All sebelum mengirimkan submission untuk memastikan seluruh cell berjalan dengan baik.
- Pastikan Anda menggunakan variabel df dari awal sampai akhir dan tidak diperbolehkan mengganti nama variabel tersebut.
- Hapus simbol pagar (#) pada kode yang bertipe komentar jika Anda menerapkan kriteria tambahan
- Biarkan simbol pagar (#) jika Anda tidak menerapkan kriteria tambahan
- Pastikan Anda mengerjakan sesuai section yang sudah diberikan tanpa mengubah judul atau header yang disediakan.

# **1. Import Library**
Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning.
"""

#Type your code here
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

"""# **2. Memuat Dataset dari Hasil Clustering**
Memuat dataset hasil clustering dari file CSV ke dalam variabel DataFrame.
"""

# Gunakan dataset hasil clustering yang memiliki fitur Target
# Silakan gunakan dataset data_clustering jika tidak menerapkan Interpretasi Hasil Clustering [Advanced]
# Silakan gunakan dataset data_clustering_inverse jika menerapkan Interpretasi Hasil Clustering [Advanced]
# Lengkapi kode berikut
df = pd.read_csv("data_clustering_inverse.csv")

# Tampilkan 5 baris pertama dengan function head.
display(df.head())

"""# **3. Data Splitting**
Tahap Data Splitting bertujuan untuk memisahkan dataset menjadi dua bagian: data latih (training set) dan data uji (test set).
"""

# Menggunakan train_test_split() untuk melakukan pembagian dataset.
# Menghapus kolom non-numerik yang tidak relevan untuk pelatihan model
X = df.drop(['Target', 'TransactionDate', 'Location', 'Channel', 'CustomerOccupation', 'PreviousTransactionDate', 'Month_Year', 'Age_Group', 'Amount_Group', 'TransactionType'], axis=1) # Fitur
y = df['Target'] # Target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Ukuran data latih (features):", X_train.shape)
print("Ukuran data uji (features):", X_test.shape)
print("Ukuran data latih (target):", y_train.shape)
print("Ukuran data uji (target):", y_test.shape)

"""# **4. Membangun Model Klasifikasi**
Setelah memilih algoritma klasifikasi yang sesuai, langkah selanjutnya adalah melatih model menggunakan data latih.

Berikut adalah rekomendasi tahapannya.
1. Menggunakan algoritma klasifikasi yaitu Decision Tree.
2. Latih model menggunakan data yang sudah dipisah.
"""

# Buatlah model klasifikasi menggunakan Decision Tree
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

# Menyimpan Model
import joblib
joblib.dump(model, 'decision_tree_model.h5')

"""# **5. Memenuhi Kriteria Skilled dan Advanced dalam Membangun Model Klasifikasi**

**Biarkan kosong jika tidak menerapkan kriteria skilled atau advanced**
"""

# Melatih model menggunakan algoritma klasifikasi selain Decision Tree.
from sklearn.linear_model import LogisticRegression

# Buat model Logistic Regression
model_lr = LogisticRegression(random_state=42, solver='liblinear')

# Latih model
model_lr.fit(X_train, y_train)

# Menampilkan hasil evaluasi akurasi, presisi, recall, dan F1-Score pada seluruh algoritma yang sudah dibuat.

# Prediksi menggunakan model Decision Tree
y_pred_dt = model.predict(X_test)

# Evaluasi model Decision Tree
accuracy_dt = accuracy_score(y_test, y_pred_dt)
precision_dt = precision_score(y_test, y_pred_dt, average='weighted')
recall_dt = recall_score(y_test, y_pred_dt, average='weighted')
f1_dt = f1_score(y_test, y_pred_dt, average='weighted')

print("Evaluasi Model Decision Tree:")
print(f"Accuracy: {accuracy_dt:.4f}")
print(f"Precision: {precision_dt:.4f}")
print(f"Recall: {recall_dt:.4f}")
print(f"F1-Score: {f1_dt:.4f}")
print("-" * 30)

# Prediksi menggunakan model Logistic Regression
y_pred_lr = model_lr.predict(X_test)

# Evaluasi model Logistic Regression
accuracy_lr = accuracy_score(y_test, y_pred_lr)
precision_lr = precision_score(y_test, y_pred_lr, average='weighted')
recall_lr = recall_score(y_test, y_pred_lr, average='weighted')
f1_lr = f1_score(y_test, y_pred_lr, average='weighted')

print("Evaluasi Model Logistic Regression:")
print(f"Accuracy: {accuracy_lr:.4f}")
print(f"Precision: {precision_lr:.4f}")
print(f"Recall: {recall_lr:.4f}")
print(f"F1-Score: {f1_lr:.4f}")

# Menyimpan Model Selain Decision Tree
# Model ini bisa lebih dari satu
import joblib

# Determine the best model based on F1-Score (or choose another metric)
if f1_lr > f1_dt:
    best_model = model_lr
    model_name = 'LogisticRegression'
else:
    best_model = model
    model_name = 'DecisionTree'

joblib.dump(best_model, f'explore_{model_name}_classification.h5')

"""Hyperparameter Tuning Model

Pilih salah satu algoritma yang ingin Anda tuning
"""

# Lakukan Hyperparameter Tuning dan Latih ulang.
# Lakukan dalam satu cell ini saja.
from sklearn.model_selection import GridSearchCV

# Define the parameter grid for Decision Tree
param_grid = {
    'max_depth': [3, 5, 7, 10, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Create a GridSearchCV object
grid_search = GridSearchCV(estimator=DecisionTreeClassifier(random_state=42),
                           param_grid=param_grid,
                           cv=5,
                           scoring='f1_weighted', # Use appropriate scoring metric
                           n_jobs=-1)

# Perform the grid search
grid_search.fit(X_train, y_train)

# Get the best parameters and best score
best_params = grid_search.best_params_
best_score = grid_search.best_score_

print("Best Hyperparameters:", best_params)
print("Best F1-Score (weighted) from Grid Search:", best_score)

# Get the best model
best_dt_model = grid_search.best_estimator_

# Menampilkan hasil evaluasi akurasi, presisi, recall, dan F1-Score pada algoritma yang sudah dituning.

# Prediksi menggunakan model Decision Tree terbaik hasil tuning
y_pred_tuned_dt = best_dt_model.predict(X_test)

# Evaluasi model Decision Tree terbaik hasil tuning
accuracy_tuned_dt = accuracy_score(y_test, y_pred_tuned_dt)
precision_tuned_dt = precision_score(y_test, y_pred_tuned_dt, average='weighted')
recall_tuned_dt = recall_score(y_test, y_pred_tuned_dt, average='weighted')
f1_tuned_dt = f1_score(y_test, y_pred_tuned_dt, average='weighted')

print("Evaluasi Model Decision Tree (setelah tuning):")
print(f"Accuracy: {accuracy_tuned_dt:.4f}")
print(f"Precision: {precision_tuned_dt:.4f}")
print(f"Recall: {recall_tuned_dt:.4f}")
print(f"F1-Score: {f1_tuned_dt:.4f}")

# Menyimpan Model hasil tuning
import joblib
joblib.dump(best_dt_model, 'tuning_classification.h5')

"""End of Code"""